config:
  name: 测试变量优先级
  base_url: http://127.0.0.1:8000
  variables:              # config variables
    varA: "configA"
    varB: "configB"
    varC: "configC"
  parameters:             # parameter variables
    varB-varA: "${P(data/AssociatedCsvFile.csv)}"
teststeps:
  - name: step 1
    variables:              # step variables
      varA: "step1A"
      device_sn: 2021032311118
      os_platform: MacOS
      app_version: 1.0.1
    request:
      url: /api/get-token
      method: POST
      headers:
        device_sn: ${device_sn}
        os_platform: ${os_platform}
        app_version: ${app_version}
        variablePriority: /${varA}/${varB}/${varC} # varA="step1A", varB="paramB1", varC="configC"
      json:
        sign: ${signGenerate(device_sn,os_platform,app_version)}
    extract:                # extracted variables
      varA: body.code   # suppose varA="extractVarA"
      varB: body.message   # suppose varB="extractVarB"
    validate:
      - equalTo: [status_code,200]
      - equalTo: [body.code,"00"]
      - equalTo: [body.message,"ok！"]
    output:
      - variables
      - extract
  - name: step 2
    variables:              # step variables
      varA: "step2A"
      device_sn: 2021032311118
      os_platform: MacOS
      app_version: 1.0.1
    request:
      url: /api/get-token
      method: POST
      headers:
        device_sn: ${device_sn}
        os_platform: ${os_platform}
        app_version: ${app_version}
        variablePriority: /${varA}/${varB}/${varC} # varA="step2A", varB="extractVarB", varC="configC"
      json:
        sign: ${signGenerate(device_sn,os_platform,app_version)}
    validate:
      - equalTo: [status_code,200]
      - equalTo: [body.code,"00"]
      - equalTo: [body.message,"ok！"]
    extract:                # extracted variables
      varA: body.code   # suppose varA="extractVarA"
      varB: body.message   # suppose varB="extractVarB"